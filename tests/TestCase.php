<?php

namespace Sfneal\Dependencies\Tests;

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables;
use Illuminate\Http\Client\Response;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Psr\SimpleCache\InvalidArgumentException;
use Sfneal\Dependencies\Providers\DependenciesServiceProvider;
use Sfneal\Dependencies\Services\DependencyService;
use Sfneal\Dependencies\Utils\DependencyUrl;
use Sfneal\Dependencies\Utils\GithubUrl;
use Sfneal\Helpers\Strings\StringHelpers;

abstract class TestCase extends \Orchestra\Testbench\TestCase
{
    /**
     * @var int Number of packages to be return from the packageProvider
     */
    protected $numberOfPackages = 3;

    /**
     * Register package service providers.
     *
     * @param  Application  $app
     * @return array|string
     */
    protected function getPackageProviders($app)
    {
        return [
            DependenciesServiceProvider::class,
        ];
    }

    /**
     * Define environment setup.
     *
     * @param  Application  $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        parent::getEnvironmentSetUp($app);

        // make sure, our .env file is loaded
        $app->useEnvironmentPath(__DIR__.'/..');
        $app->bootstrapWith([LoadEnvironmentVariables::class]);

        // Cache config
        $app['config']->set('app.debug', true);
        $app['config']->set('cache.default', env('CACHE_DEFAULT', config('cache.default')));
        $app['config']->set('database.redis.client', env('REDIS_CLIENT', 'mock'));
        $app['config']->set('database.redis.default.host', env('REDIS_HOST', '127.0.0.1'));
        $app['config']->set('database.redis.default.port', env('REDIS_PORT', 6379));
        $app['config']->set('database.redis.default.options.prefix', null);
        $app['config']->set('cache.stores.redis.connection', 'default');

        $app['config']->set('cache.stores.http.driver', env('CACHE_DEFAULT', config('cache.default')));
        $app['config']->set('cache.stores.http.connection', 'cache');

        $app['config']->set('dependencies.github_alias', ['stephenneal' => 'sfneal']);
    }

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Cache::flush();
    }

    /**
     * Retrieve an array of packages.
     *
     * @return array
     */
    public function packageProvider(): array
    {
        $packages = [
            ['sfneal/actions', 'composer'],
            ['sfneal/controllers', 'composer'],
            ['sfneal/laravel-helpers', 'composer'],
            ['sfneal/queueables', 'composer'],
            ['sfneal/redis-helpers', 'composer'],
            ['sfneal/scopes', 'composer'],
            ['sfneal/string-helpers', 'composer'],
            ['sfneal/time-helpers', 'composer'],
            ['sfneal/tracking', 'composer'],
            ['symfony/console', 'composer'],
            ['spatie/laravel-view-models', 'composer'],
            ['webmozart/assert', 'composer'],
            ['spatie/laravel-settings', 'composer'],
            ['illuminate/database', 'composer'],
            ['stephenneal/php-composer', 'docker'],
            ['stephenneal/php-laravel', 'docker'],
            ['stephenneal/nginx-laravel', 'docker'],
            ['stephenneal/nginx-proxy', 'docker'],
            ['stephenneal/node-yarn', 'docker'],
            ['stephenneal/python-flask', 'docker'],
            ['sfneal/pdfconduit', 'python'],
            ['sfneal/theme-amalgamate', 'node'],
            ['sfneal/html-rivulet', 'node'],
            ['sfneal/paraflux', 'node'],
        ];
        shuffle($packages);

        return $packages;
    }

    /**
     * Retrieve the number of packages to expect.
     *
     * @return int
     */
    public function expectedPackagesCount(): int
    {
        return count($this->packageProvider());
    }

    /**
     * Execute `DependencyService` assertions.
     *
     * @param  Collection  $collection
     * @param  int  $expected
     * @param  array|null  $globalParams
     */
    public function assertDependencyServiceCollection(Collection $collection, int $expected, array $globalParams = null): void
    {
        $this->assertInstanceOf(Collection::class, $collection);
        $this->assertSame($expected, $collection->count());

        $collection->each(function (DependencyService $service) use ($globalParams) {
            $this->assertTravisSvg($service->githubRepo, $service->travis(), false);
            $this->assertVersionSvg($service->project, $service->version(), false);
            $this->assertLastCommitSvg($service->githubRepo, $service->lastCommit(), false);
            $this->assertOpenIssuesSvg($service->githubRepo, $service->openIssues(), false);
            $this->assertClosedIssuesSvg($service->githubRepo, $service->closedIssues(), false);
            $this->assertOpenPullRequestsSvg($service->githubRepo, $service->openPullRequests(), false);
            $this->assertClosedPullRequestsSvg($service->githubRepo, $service->closedPullRequests(), false);

            $this->assertGithub($service->githubRepo, $service->gitHub(), false);
            $this->assertTravisUrl($service->githubRepo, $service->travis(), false);
            $this->assertVersionUrl($service->project, $service->version(), false);
            $this->assertOpenIssuesUrl($service->githubRepo, $service->openIssues(), false);
            $this->assertClosedIssuesUrl($service->githubRepo, $service->closedIssues(), false);
            $this->assertOpenPullRequestsUrl($service->githubRepo, $service->openPullRequests(), false);
            $this->assertClosedPullRequestsUrl($service->githubRepo, $service->closedPullRequests(), false);

            if (isset($globalParams)) {
                $svgs = [
                    $service->version(),
                    $service->lastCommit(),
                    $service->openIssues(),
                    $service->closedIssues(),
                    $service->openPullRequests(),
                    $service->closedPullRequests(),
                ];

                foreach ($svgs as $svg) {
                    $this->assertStringContainsString(ltrim(self::generateQueryString($globalParams), '?'), $svg->svg());
                }
            }
        });
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertTravisSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('app.travis-ci.com', $url);
        $this->assertStringContainsString('.svg?branch=master', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('build', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertVersionSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString(explode('/', $package)[1] ?? $package, $url);
        $this->assertStringContainsString('img.shields.io/', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $inString = (new StringHelpers($response->body()));
            $this->assertTrue(
                $inString->inString('<title>packagist: v')
                || $inString->inString('version')
                || $inString->inString('npm')
                || $inString->inString('<title>pypi'),
                "The response body provided by {$url} doesn't contain 'packagist' or 'version'"
            );
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertLastCommitSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('img.shields.io/github/last-commit', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('last commit', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  GithubUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertGithub(string $package, GithubUrl $generator, bool $sendRequest = true)
    {
        $this->assertInstanceOf(GithubUrl::class, $generator);
        $this->assertInstanceOf(DependencyUrl::class, $generator);

        // URL
        $url = $generator->url();
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github.com', $url);

        if ($sendRequest) {
            $this->sendRequest($url);
        }

        // GitHub API
        if (! is_null(config('dependencies.github_pat'))) {

            // Description
            $description = $generator->description();
            $this->assertNotNull($description);
            $this->assertIsString($description);

            // Default Branch
            $defaultBranch = $generator->defaultBranch();
            $this->assertNotNull($defaultBranch);
            $this->assertIsString($defaultBranch);

            // Download
            $download = $generator->download();
            $this->assertNotNull($download);
            $this->assertIsString($download);
            if ($sendRequest) {
                $this->sendRequest($download);
            }
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertTravisUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('app.travis-ci.com', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertVersionUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();
        $inString = new StringHelpers($url);

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString(explode('/', $package)[1] ?? $package, $url);
        $this->assertTrue(
            $inString->inString('packagist.org/packages')
            || $inString->inString('hub.docker.com/r/')
            || $inString->inString('npmjs.com/package')
            || $inString->inString('pypi.org/project/'),
            "The response body provided by {$url} doesn't contain 'packagist.org' or 'hub.docker.com'"
        );

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertOpenIssuesSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github/issues-raw', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('open issues', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertClosedIssuesSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github/issues-closed-raw', $url);
        $this->assertStringContainsString('color=red', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('closed issues', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertOpenIssuesUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github.com', $url);
        $this->assertStringContainsString('/issues', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertClosedIssuesUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github.com', $url);
        $this->assertStringContainsString('/issues', $url);
        $this->assertStringContainsString('q=is%3Aissue+is%3Aclosed', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertOpenPullRequestsSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github/issues-pr-raw', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('open pull requests', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertClosedPullRequestsSvg(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->svg();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github/issues-pr-closed-raw', $url);
        $this->assertStringContainsString('color=red', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);

            $this->assertStringContainsString('closed pull requests', $response->body());
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertOpenPullRequestsUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github.com', $url);
        $this->assertStringContainsString('/pulls', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * @param  string  $package
     * @param  DependencyUrl  $generator
     * @param  bool  $sendRequest
     */
    public function assertClosedPullRequestsUrl(string $package, DependencyUrl $generator, bool $sendRequest = true)
    {
        $url = $generator->url();

        $this->assertInstanceOf(DependencyUrl::class, $generator);
        $this->assertStringContainsString($package, $url);
        $this->assertStringContainsString('github.com', $url);
        $this->assertStringContainsString('/pulls', $url);
        $this->assertStringContainsString('q=is%3Aissue+is%3Aclosed', $url);

        if ($sendRequest) {
            $response = $this->sendRequest($url);
        }
    }

    /**
     * Send an HTTP request, validate its response is "Ok" & return the response.
     *
     * @param  string  $url
     * @return Response
     *
     * @throws InvalidArgumentException
     */
    protected function sendRequest(string $url): Response
    {
        $response = Cache::store('http')->rememberForever($url, function () use ($url) {
            return Http::retry(3, 500)->get($url);
        });

        // Assert caching
        $this->assertTrue(Cache::store('http')->has($url));

        // Assert response
        $this->assertTrue($response->ok(), "Error: code {$response->status()} from {$url}");

        return $response;
    }

    /**
     * Generate a query string.
     *
     * @param  array|null  $params
     * @return string
     */
    protected static function generateQueryString(array $params = null): string
    {
        if (! is_null($params)) {
            $query = '?';

            $paramStrings = [];
            foreach (array_unique($params) as $key => $value) {
                $paramStrings[] = "{$key}={$value}";
            }

            return $query.implode('&', $paramStrings);
        }

        return '';
    }
}
